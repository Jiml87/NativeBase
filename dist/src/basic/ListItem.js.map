{"version":3,"sources":["../../../src/basic/ListItem.js"],"names":["ListItem","variables","context","theme","OS","androidRipple","props","onPress","onLongPress","Version","_root","c","listBtnUnderlayColor","testID","accessibilityLabel","children","androidRippleColor","Ripple","androidRippleColorDark","marginLeft","paddingLeft","contextTypes","PropTypes","object","propTypes","style","itemDivider","bool","button","string","defaultProps","StyledListItem"],"mappings":"21BAAA,4B;AACA;;AAEA;AACA,mE;AACA,qD;;AAEMA,Q;;;;AAII;AACR,GAAMC,WAAY,KAAKC,OAAL,CAAaC,KAAb,CAAqB,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SAAtE,mBAAlB;;AAEA;AACC,sBAASG,EAAT,GAAgB,KAAhB;AACA,mBAASC,aAAT,GAA2B,KAD3B;AAEC,CAAC,KAAKC,KAAL,CAAWC,OAAZ,EAAuB,CAAC,KAAKD,KAAL,CAAWE,WAFpC;AAGA,sBAASC,OAAT,EAAoB,EAJrB;AAKE;AACD;AACC;AACC,WAAY,KADb;AAEC,QAAS,KAAKH,KAAL,CAAWC,OAFrB;AAGC,YAAa,KAAKD,KAAL,CAAWE,WAHzB;AAIC,IAAK,sBAAM,QAAKE,KAAL,CAAaC,CAAnB,EAJN;AAKC,cAAeV,UAAUW,oBAL1B;AAMC,OAAQ,KAAKN,KAAL,CAAWO,MANpB;AAOC,mBAAoB,KAAKP,KAAL,CAAWQ,kBAPhC;;AASC,4DAAU,KAAKR,KAAf,mDAAuB,KAAKA,KAAL,CAAWS,QAAlC,CATD,CADD;;;AAaA,CAnBD,IAmBO;AACN;AACC;AACC,WAAY,KADb;AAEC,IAAK,sBAAM,QAAKL,KAAL,CAAaC,CAAnB,EAFN;AAGC,QAAS,KAAKL,KAAL,CAAWC,OAHrB;AAIC,YAAa,KAAKD,KAAL,CAAWE,WAJzB;AAKC;AACC,KAAKF,KAAL,CAAWU,kBAAX;AACG,qCAAwBC,MAAxB,CAA+B,KAAKX,KAAL,CAAWU,kBAA1C,CADH;AAEG,qCAAwBC,MAAxB,CAA+B,mBAASC,sBAAxC,CARL;;AAUC,OAAQ,KAAKZ,KAAL,CAAWO,MAVpB;AAWC,mBAAoB,KAAKP,KAAL,CAAWQ,kBAXhC;;;AAcC,iDAAM,MAAO,CAAEK,WAAY,CAAC,EAAf,CAAmBC,YAAa,EAAhC,CAAb;AACC,4DAAU,KAAKd,KAAf,mDAAuB,KAAKA,KAAL,CAAWS,QAAlC,CADD,CAdD,CADD;;;;AAoBA;AACD,C,wCAhDIf,Q,CACEqB,Y,CAAe,CACrBlB,MAAO,gBAAMmB,SAAN,CAAgBC,MADF,C;;;AAkDvBvB,SAASwB,SAAT;AACI,gCAAmBA,SADvB;AAECC,MAAO,gBAAMH,SAAN,CAAgBC,MAFxB;AAGCG,YAAa,gBAAMJ,SAAN,CAAgBK,IAH9B;AAICC,OAAQ,gBAAMN,SAAN,CAAgBK,IAJzB;AAKCb,mBAAoB,gBAAMQ,SAAN,CAAgBO,MALrC;AAMChB,OAAQ,gBAAMS,SAAN,CAAgBO,MANzB;;AAQA7B,SAAS8B,YAAT,CAAsB;AACrBhB,mBAAoB,EADC;AAErBD,OAAQ,EAFa,CAAtB;;;AAKA,GAAMkB,gBAAiB,yCAAa,qBAAb,CAAoC,EAApC,iCAA8D/B,QAA9D,CAAvB,C;;AAE2BA,Q,CAAlB+B,c","file":"ListItem.js","sourcesContent":["import React, { Component } from 'react';\nimport { TouchableHighlight, Platform, TouchableNativeFeedback, View } from 'react-native';\n\nimport { connectStyle } from 'native-base-shoutem-theme';\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\n\nclass ListItem extends Component {\n\tstatic contextTypes = {\n\t\ttheme: React.PropTypes.object,\n\t};\n\trender() {\n\t\tconst variables = this.context.theme ? this.context.theme['@@shoutem.theme/themeStyle'].variables : variable;\n\n\t\tif (\n\t\t\tPlatform.OS === 'ios' ||\n\t\t\tvariable.androidRipple === false ||\n\t\t\t(!this.props.onPress && !this.props.onLongPress) ||\n\t\t\tPlatform.Version <= 21\n\t\t) {\n\t\t\treturn (\n\t\t\t\t<TouchableHighlight\n\t\t\t\t\taccessible={false}\n\t\t\t\t\tonPress={this.props.onPress}\n\t\t\t\t\tonLongPress={this.props.onLongPress}\n\t\t\t\t\tref={c => (this._root = c)}\n\t\t\t\t\tunderlayColor={variables.listBtnUnderlayColor}\n\t\t\t\t\ttestID={this.props.testID}\n\t\t\t\t\taccessibilityLabel={this.props.accessibilityLabel}\n\t\t\t\t>\n\t\t\t\t\t<View {...this.props}>{this.props.children}</View>\n\t\t\t\t</TouchableHighlight>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<TouchableNativeFeedback\n\t\t\t\t\taccessible={false}\n\t\t\t\t\tref={c => (this._root = c)}\n\t\t\t\t\tonPress={this.props.onPress}\n\t\t\t\t\tonLongPress={this.props.onLongPress}\n\t\t\t\t\tbackground={\n\t\t\t\t\t\tthis.props.androidRippleColor\n\t\t\t\t\t\t\t? TouchableNativeFeedback.Ripple(this.props.androidRippleColor)\n\t\t\t\t\t\t\t: TouchableNativeFeedback.Ripple(variable.androidRippleColorDark)\n\t\t\t\t\t}\n\t\t\t\t\ttestID={this.props.testID}\n\t\t\t\t\taccessibilityLabel={this.props.accessibilityLabel}\n\n\t\t\t\t>\n\t\t\t\t\t<View style={{ marginLeft: -17, paddingLeft: 17 }}>\n\t\t\t\t\t\t<View {...this.props}>{this.props.children}</View>\n\t\t\t\t\t</View>\n\t\t\t\t</TouchableNativeFeedback>\n\t\t\t);\n\t\t}\n\t}\n}\n\nListItem.propTypes = {\n\t...TouchableHighlight.propTypes,\n\tstyle: React.PropTypes.object,\n\titemDivider: React.PropTypes.bool,\n\tbutton: React.PropTypes.bool,\n\taccessibilityLabel: React.PropTypes.string,\n\ttestID: React.PropTypes.string,\n};\nListItem.defaultProps={\n\taccessibilityLabel: '',\n\ttestID: '',\n}\n\nconst StyledListItem = connectStyle('NativeBase.ListItem', {}, mapPropsToStyleNames)(ListItem);\n\nexport { StyledListItem as ListItem };\n"]}