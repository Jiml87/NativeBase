{"version":3,"sources":["../../../src/basic/Radio.js"],"names":["Radio","defaultProps","standardStyle","props","variables","context","theme","platformStyle","platform","accessible","_root","c","prepareRootProps","OS","selected","color","brandPrimary","lineHeight","height","fontSize","radioBtnSize","undefined","radioSelectedColorAndroid","radioBtnLineHeight","contextTypes","object","propTypes","bool","StyledRadio"],"mappings":"q1BAAA,4B;AACA;AACA;AACA,4D;AACA,mE;AACA,qD;AACA,mD;;AAEMA,K;;;;AAIe;AACjB,GAAMC,cAAe;AACnBC,cAAe,KADI,CAArB;;;AAIA,MAAO,2BAAa,KAAKC,KAAlB,CAAyBF,YAAzB,CAAP;AACD,C;;AAEQ;AACP,GAAMG,WAAY,KAAKC,OAAL,CAAaC,KAAb;AACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SADnC,mBAAlB;;AAGA,GAAMG,eAAgBH,UAAUG,aAAhC;AACA,GAAMC,UAAWJ,UAAUI,QAA3B;;AAEA;AACE;AACE,WAAY,mBAASC,UADvB;AAEE,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EAFP;AAGM,KAAKC,gBAAL,EAHN;;AAKG,sBAASC,EAAT,GAAgB,KAAhB,EAAyB,CAAC,KAAKV,KAAL,CAAWD,aAArC;AACG,KAAKC,KAAL,CAAWW,QAAX;AACA;AACE,MAAO;AACLC,MAAOX,UAAUY,YADZ;AAELC,WAAY,EAFP;AAGLC,OAAQ,EAHH;AAILC,SAAUf,UAAUgB,YAJf,CADT;;AAOE,KAAK,eAPP,iDAFH;;AAWG;AACE,MAAO;AACLL;AACE,sBAASF,EAAT,GAAgB,KAAhB;AACI,KAAKV,KAAL,CAAWW,QAAX,CAAsBV,UAAUY,YAAhC,CAA+CK,SADnD;AAEI,KAAKlB,KAAL,CAAWW,QAAX;AACEV,UAAUkB,yBADZ;AAEED,SANH;AAOLJ,WAAYb,UAAUmB,kBAPjB;AAQLJ,SAAUf,UAAUgB,YARf,CADT;;AAWE;AACE,sBAASP,EAAT,GAAgB,KAAhB;AACI,KAAKV,KAAL,CAAWW,QAAX;AACE,qBADF;AAEE,sBAHN;AAII,KAAKX,KAAL,CAAWW,QAAX;AACE,oBADF;AAEE,qBAlBV,iDAhBN,CADF;;;;;AAwCD,C,qCA3DGd,K,CACGwB,Y,CAAe,CACpBlB,MAAO,iBAAUmB,MADG,C;;;AA6DxBzB,MAAM0B,SAAN;AACK,8BAAiBA,SADtB;AAEEZ,SAAU,iBAAUa,IAFtB;AAGEzB,cAAe,iBAAUyB,IAH3B;;;AAMA,GAAMC,aAAc,yCAAa,kBAAb,CAAiC,EAAjC;AAClB5B,KADkB,CAApB,C;;;AAIwBA,K,CAAf4B,W","file":"Radio.js","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport { TouchableOpacity, Platform } from \"react-native\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport Icon from \"react-native-vector-icons/Ionicons\";\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\nimport variable from \"../theme/variables/platform\";\nimport computeProps from \"../Utils/computeProps\";\n\nclass Radio extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n  prepareRootProps() {\n    const defaultProps = {\n      standardStyle: false\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const platform = variables.platform;\n\n    return (\n      <TouchableOpacity\n        accessible={variable.accessible}\n        ref={c => (this._root = c)}\n        {...this.prepareRootProps()}\n      >\n        {Platform.OS === \"ios\" && !this.props.standardStyle\n          ? this.props.selected &&\n            <Icon\n              style={{\n                color: variables.brandPrimary,\n                lineHeight: 25,\n                height: 20,\n                fontSize: variables.radioBtnSize\n              }}\n              name=\"ios-checkmark\"\n            />\n          : <Icon\n              style={{\n                color:\n                  Platform.OS === \"ios\"\n                    ? this.props.selected ? variables.brandPrimary : undefined\n                    : this.props.selected\n                      ? variables.radioSelectedColorAndroid\n                      : undefined,\n                lineHeight: variables.radioBtnLineHeight,\n                fontSize: variables.radioBtnSize\n              }}\n              name={\n                Platform.OS === \"ios\"\n                  ? this.props.selected\n                    ? \"ios-radio-button-on\"\n                    : \"ios-radio-button-off\"\n                  : this.props.selected\n                    ? \"md-radio-button-on\"\n                    : \"md-radio-button-off\"\n              }\n            />}\n      </TouchableOpacity>\n    );\n  }\n}\n\nRadio.propTypes = {\n  ...TouchableOpacity.propTypes,\n  selected: PropTypes.bool,\n  standardStyle: PropTypes.bool\n};\n\nconst StyledRadio = connectStyle(\"NativeBase.Radio\", {}, mapPropsToStyleNames)(\n  Radio\n);\n\nexport { StyledRadio as Radio };\n"]}